//index.js
//获取应用实例
const app = getApp()

Page({

  /**
   * 页面的初始数据
   */
  data: {
    feed: [
      {
        "question_id": 1,
        "answer_id": 3,
        "feed_source_id": 23,
        "feed_source_name": "Rebecca",
        "feed_source_txt": "赞了回答1",
        "feed_source_img": "../../images/icon1.jpeg",
        "question": "你是如何学会编程的？",
        "describe": "有人建议说学 Android APP 开发的，有说学 Java 的，有说学 iOS App 开发的，有说学HTML的，有说学 PHP 的，还有建议学 Python 的，到底该学哪个？买什么配置的笔记本电脑？",
        "answer_ctnt": "有个兰大的学妹私信我编程的经验，索性把写好的在粘贴一次吧。因为我知道当个好程序员的过程着实不容易。关于编程超有感触一次：当初上陈国良院士的并行算法课，那老头讲的深的不行，刷刷地调试程序看的我们这群土孩子都惊呆了，讲的好像挺好，反正我们也没听懂。后来那老头说：“想学好程序，编程，就一个办法，一个办法：猛的敲代码。这些东西你们现在看不懂，当初我也看不懂，那你要做的就是不断地敲程序，debug.然后量变引起质变，再回归理论。千万别试图妄想通过看看几本书，背熟了语法就想学会编程，看的再多都没有用，一般来说精通一门编程语言十万行有效代码，基本就可以动力定型了，熟悉的话至少需要三万行。有些算法，类（java有几千个现成的类供继承）, 前人栽树，我们后人乘凉就好了。我们需要记住的经典的算法，类是如何用的就行了，你不太可能再去设计出一种算法。因为技术大牛太多了，有些智商上的优越是你后天无论怎么努力也无法企及的。我们只要站在巨人的肩膀上够了。最起码就我身边案例来说年薪几十万没有问题的。说到底，编程是一门技术，需要的是练习，孰能生巧。现在中国大学教学方法，有的简直就是误人子弟，很容易走弯路。当然因为能力有限，所以我说的编程是叫你可以拿到年薪几十万甚至百万的软件开发工作，不是算法研究创新工作，不是自己去搞一个牛逼的算法出来。当然学习是一个痛苦的过程，学习编程更是，丘吉尔有一句话说的很好：重要的不是你喜欢做什么，而是要喜欢你正在做的事。既然选择了程序员这条路，那就且编且珍惜吧.",
        "good_num": "112",
        "comment_num": "18"
      },
      {
        "question_id": 2,
        "answer_id": 25,
        "feed_source_id": 24,
        "feed_source_name": "Alex",
        "feed_source_txt": "回答了问题2",
        "feed_source_img": "../../images/icon8.jpg",
        "question": "2019年Android开发的前景如何？",
        "describe": "在小程序，H5大前端的冲击下，原生Android开发还能撑多久？现在很多时候都是在APP里面嵌页面，原生就是一个外壳，作为一个Android开发人员，感觉有点尴尬",
        "answer_ctnt": "谢邀.我不是鼓励年轻人随便跳槽和换技术栈，但有一点，我们做技术的，既要埋头钻研技术，也要抬头看看行业大势。简单而言，android发展路线，其实可以参照windows的发展路线，前几年我回答过一个问题也是这个思路:安卓与IOS哪个市场前景大？回过头来看题主的问题，2019年以后安卓开发的前景会怎么样？想想windows就简单了，答案是会衰退。随着app在头部的聚集，大量手机公司、app创业公司的倒闭，整个行业雇佣的人员会越来越少。当然，目前还只是行业发展的中后期，还有时间，即使到了行业后期也大可不必焦虑惊慌，对于基础牢固的研发来说，换个平台也不是件难事，之前windows研发人员，牛逼的换个平台，还是继续牛逼。",
        "good_num": "112",
        "comment_num": "18"
      },
      {
        "question_id": 3,
        "answer_id": 61,
        "feed_source_id": 25,
        "feed_source_name": "George",
        "feed_source_txt": "赞了回答3",
        "feed_source_img": "../../images/icon9.jpeg",
        "question": "如何系统地自学 Python？",
        "describe": "零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？",
        "answer_ctnt": "在知乎上常常看到想要转行IT，或者是想学习编程但不知如何开始的朋友。回答这类问题的人往往只是列出书单资源然后给出一个大致的方向。有些朋友一开始就扎入了理论学习的汪洋大海，从苦读类似《算法导论》开始，能够坚持读下来的寥寥无几，学习的积极性也被不断的挫败感消磨的所剩无几。一直以来，编程对我而言是一种「黑魔法」般的存在。今年阿里月饼门，当很多人都参与到是非之争的时候，我更加着迷于程序员区区几行代码的脚本所展现出的威力，对于外行而言，这是超乎他们想象之外的某种能力——为什么我守在电脑面前盯着秒针然后拼命点击鼠标都不一定能抢到的礼物，程序员只需要提前花5分钟写3行代码就轻松搞定？所以，我的心底深处一直都想变成这样的一位魔法师。今年的8月，刚好工作上想要开发一个基于微信的英语学习网站，借此机会，我决定好好学习一下编程。在此之前，我所有关于程序的知识仅仅来源于两部分，一是本科时期的C语言必修课，现在已经忘的一干二净，不过好歹我从中明白编程是怎么回事；第二部分是大概两年前由于工作关系学的一些Python，不过只是皮毛，现在忘的七七八八。简单说，我的目标是建立一个网站，不过这个网站是动态的，也就是说它能识别谁登陆，然后对不同的人显示不同的内容。而当时的现实是，我完全不明白网页是如何显示出来的？譬如每个人登陆知乎的时候看到的是定制化的页面，后台是如何基于每个ID来组织出不同的页面的？所有我们看到的问题，回答，参与的评论在背后的服务器上是以一种什么样的形式存在的？又比如为什么有些页面只能在微信端打开，在电脑上就会出错？（不知道你有没有发现这一点）",
        "good_num": "112",
        "comment_num": "18"
      },
      {
        "question_id": 1,
        "answer_id": 3,
        "feed_source_id": 23,
        "feed_source_name": "Rebecca",
        "feed_source_txt": "赞了回答1",
        "feed_source_img": "../../images/icon1.jpeg",
        "question": "你是如何学会编程的？",
        "describe": "有人建议说学 Android APP 开发的，有说学 Java 的，有说学 iOS App 开发的，有说学HTML的，有说学 PHP 的，还有建议学 Python 的，到底该学哪个？买什么配置的笔记本电脑？",
        "answer_ctnt": "有个兰大的学妹私信我编程的经验，索性把写好的在粘贴一次吧。因为我知道当个好程序员的过程着实不容易。关于编程超有感触一次：当初上陈国良院士的并行算法课，那老头讲的深的不行，刷刷地调试程序看的我们这群土孩子都惊呆了，讲的好像挺好，反正我们也没听懂。后来那老头说：“想学好程序，编程，就一个办法，一个办法：猛的敲代码。这些东西你们现在看不懂，当初我也看不懂，那你要做的就是不断地敲程序，debug.然后量变引起质变，再回归理论。千万别试图妄想通过看看几本书，背熟了语法就想学会编程，看的再多都没有用，一般来说精通一门编程语言十万行有效代码，基本就可以动力定型了，熟悉的话至少需要三万行。有些算法，类（java有几千个现成的类供继承）, 前人栽树，我们后人乘凉就好了。我们需要记住的经典的算法，类是如何用的就行了，你不太可能再去设计出一种算法。因为技术大牛太多了，有些智商上的优越是你后天无论怎么努力也无法企及的。我们只要站在巨人的肩膀上够了。最起码就我身边案例来说年薪几十万没有问题的。说到底，编程是一门技术，需要的是练习，孰能生巧。现在中国大学教学方法，有的简直就是误人子弟，很容易走弯路。当然因为能力有限，所以我说的编程是叫你可以拿到年薪几十万甚至百万的软件开发工作，不是算法研究创新工作，不是自己去搞一个牛逼的算法出来。当然学习是一个痛苦的过程，学习编程更是，丘吉尔有一句话说的很好：重要的不是你喜欢做什么，而是要喜欢你正在做的事。既然选择了程序员这条路，那就且编且珍惜吧.",
        "good_num": "112",
        "comment_num": "18"
      },
      {
        "question_id": 2,
        "answer_id": 25,
        "feed_source_id": 24,
        "feed_source_name": "Alex",
        "feed_source_txt": "回答了问题2",
        "feed_source_img": "../../images/icon8.jpg",
        "question": "2019年Android开发的前景如何？",
        "describe": "在小程序，H5大前端的冲击下，原生Android开发还能撑多久？现在很多时候都是在APP里面嵌页面，原生就是一个外壳，作为一个Android开发人员，感觉有点尴尬",
        "answer_ctnt": "谢邀.我不是鼓励年轻人随便跳槽和换技术栈，但有一点，我们做技术的，既要埋头钻研技术，也要抬头看看行业大势。简单而言，android发展路线，其实可以参照windows的发展路线，前几年我回答过一个问题也是这个思路:安卓与IOS哪个市场前景大？回过头来看题主的问题，2019年以后安卓开发的前景会怎么样？想想windows就简单了，答案是会衰退。随着app在头部的聚集，大量手机公司、app创业公司的倒闭，整个行业雇佣的人员会越来越少。当然，目前还只是行业发展的中后期，还有时间，即使到了行业后期也大可不必焦虑惊慌，对于基础牢固的研发来说，换个平台也不是件难事，之前windows研发人员，牛逼的换个平台，还是继续牛逼。",
        "good_num": "112",
        "comment_num": "18"
      },
      {
        "question_id": 3,
        "answer_id": 61,
        "feed_source_id": 25,
        "feed_source_name": "George",
        "feed_source_txt": "赞了回答3",
        "feed_source_img": "../../images/icon9.jpeg",
        "question": "如何系统地自学 Python？",
        "describe": "零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？",
        "answer_ctnt": "在知乎上常常看到想要转行IT，或者是想学习编程但不知如何开始的朋友。回答这类问题的人往往只是列出书单资源然后给出一个大致的方向。有些朋友一开始就扎入了理论学习的汪洋大海，从苦读类似《算法导论》开始，能够坚持读下来的寥寥无几，学习的积极性也被不断的挫败感消磨的所剩无几。一直以来，编程对我而言是一种「黑魔法」般的存在。今年阿里月饼门，当很多人都参与到是非之争的时候，我更加着迷于程序员区区几行代码的脚本所展现出的威力，对于外行而言，这是超乎他们想象之外的某种能力——为什么我守在电脑面前盯着秒针然后拼命点击鼠标都不一定能抢到的礼物，程序员只需要提前花5分钟写3行代码就轻松搞定？所以，我的心底深处一直都想变成这样的一位魔法师。今年的8月，刚好工作上想要开发一个基于微信的英语学习网站，借此机会，我决定好好学习一下编程。在此之前，我所有关于程序的知识仅仅来源于两部分，一是本科时期的C语言必修课，现在已经忘的一干二净，不过好歹我从中明白编程是怎么回事；第二部分是大概两年前由于工作关系学的一些Python，不过只是皮毛，现在忘的七七八八。简单说，我的目标是建立一个网站，不过这个网站是动态的，也就是说它能识别谁登陆，然后对不同的人显示不同的内容。而当时的现实是，我完全不明白网页是如何显示出来的？譬如每个人登陆知乎的时候看到的是定制化的页面，后台是如何基于每个ID来组织出不同的页面的？所有我们看到的问题，回答，参与的评论在背后的服务器上是以一种什么样的形式存在的？又比如为什么有些页面只能在微信端打开，在电脑上就会出错？（不知道你有没有发现这一点）",
        "good_num": "112",
        "comment_num": "18"
      },
      {
        "question_id": 1,
        "answer_id": 3,
        "feed_source_id": 23,
        "feed_source_name": "Rebecca",
        "feed_source_txt": "赞了回答1",
        "feed_source_img": "../../images/icon1.jpeg",
        "question": "你是如何学会编程的？",
        "describe": "有人建议说学 Android APP 开发的，有说学 Java 的，有说学 iOS App 开发的，有说学HTML的，有说学 PHP 的，还有建议学 Python 的，到底该学哪个？买什么配置的笔记本电脑？",
        "answer_ctnt": "有个兰大的学妹私信我编程的经验，索性把写好的在粘贴一次吧。因为我知道当个好程序员的过程着实不容易。关于编程超有感触一次：当初上陈国良院士的并行算法课，那老头讲的深的不行，刷刷地调试程序看的我们这群土孩子都惊呆了，讲的好像挺好，反正我们也没听懂。后来那老头说：“想学好程序，编程，就一个办法，一个办法：猛的敲代码。这些东西你们现在看不懂，当初我也看不懂，那你要做的就是不断地敲程序，debug.然后量变引起质变，再回归理论。千万别试图妄想通过看看几本书，背熟了语法就想学会编程，看的再多都没有用，一般来说精通一门编程语言十万行有效代码，基本就可以动力定型了，熟悉的话至少需要三万行。有些算法，类（java有几千个现成的类供继承）, 前人栽树，我们后人乘凉就好了。我们需要记住的经典的算法，类是如何用的就行了，你不太可能再去设计出一种算法。因为技术大牛太多了，有些智商上的优越是你后天无论怎么努力也无法企及的。我们只要站在巨人的肩膀上够了。最起码就我身边案例来说年薪几十万没有问题的。说到底，编程是一门技术，需要的是练习，孰能生巧。现在中国大学教学方法，有的简直就是误人子弟，很容易走弯路。当然因为能力有限，所以我说的编程是叫你可以拿到年薪几十万甚至百万的软件开发工作，不是算法研究创新工作，不是自己去搞一个牛逼的算法出来。当然学习是一个痛苦的过程，学习编程更是，丘吉尔有一句话说的很好：重要的不是你喜欢做什么，而是要喜欢你正在做的事。既然选择了程序员这条路，那就且编且珍惜吧.",
        "good_num": "112",
        "comment_num": "18"
      },
      {
        "question_id": 2,
        "answer_id": 25,
        "feed_source_id": 24,
        "feed_source_name": "Alex",
        "feed_source_txt": "回答了问题2",
        "feed_source_img": "../../images/icon8.jpg",
        "question": "2019年Android开发的前景如何？",
        "describe": "在小程序，H5大前端的冲击下，原生Android开发还能撑多久？现在很多时候都是在APP里面嵌页面，原生就是一个外壳，作为一个Android开发人员，感觉有点尴尬",
        "answer_ctnt": "谢邀.我不是鼓励年轻人随便跳槽和换技术栈，但有一点，我们做技术的，既要埋头钻研技术，也要抬头看看行业大势。简单而言，android发展路线，其实可以参照windows的发展路线，前几年我回答过一个问题也是这个思路:安卓与IOS哪个市场前景大？回过头来看题主的问题，2019年以后安卓开发的前景会怎么样？想想windows就简单了，答案是会衰退。随着app在头部的聚集，大量手机公司、app创业公司的倒闭，整个行业雇佣的人员会越来越少。当然，目前还只是行业发展的中后期，还有时间，即使到了行业后期也大可不必焦虑惊慌，对于基础牢固的研发来说，换个平台也不是件难事，之前windows研发人员，牛逼的换个平台，还是继续牛逼。",
        "good_num": "112",
        "comment_num": "18"
      },
      {
        "question_id": 3,
        "answer_id": 61,
        "feed_source_id": 25,
        "feed_source_name": "George",
        "feed_source_txt": "赞了回答3",
        "feed_source_img": "../../images/icon9.jpeg",
        "question": "如何系统地自学 Python？",
        "describe": "零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？",
        "answer_ctnt": "在知乎上常常看到想要转行IT，或者是想学习编程但不知如何开始的朋友。回答这类问题的人往往只是列出书单资源然后给出一个大致的方向。有些朋友一开始就扎入了理论学习的汪洋大海，从苦读类似《算法导论》开始，能够坚持读下来的寥寥无几，学习的积极性也被不断的挫败感消磨的所剩无几。一直以来，编程对我而言是一种「黑魔法」般的存在。今年阿里月饼门，当很多人都参与到是非之争的时候，我更加着迷于程序员区区几行代码的脚本所展现出的威力，对于外行而言，这是超乎他们想象之外的某种能力——为什么我守在电脑面前盯着秒针然后拼命点击鼠标都不一定能抢到的礼物，程序员只需要提前花5分钟写3行代码就轻松搞定？所以，我的心底深处一直都想变成这样的一位魔法师。今年的8月，刚好工作上想要开发一个基于微信的英语学习网站，借此机会，我决定好好学习一下编程。在此之前，我所有关于程序的知识仅仅来源于两部分，一是本科时期的C语言必修课，现在已经忘的一干二净，不过好歹我从中明白编程是怎么回事；第二部分是大概两年前由于工作关系学的一些Python，不过只是皮毛，现在忘的七七八八。简单说，我的目标是建立一个网站，不过这个网站是动态的，也就是说它能识别谁登陆，然后对不同的人显示不同的内容。而当时的现实是，我完全不明白网页是如何显示出来的？譬如每个人登陆知乎的时候看到的是定制化的页面，后台是如何基于每个ID来组织出不同的页面的？所有我们看到的问题，回答，参与的评论在背后的服务器上是以一种什么样的形式存在的？又比如为什么有些页面只能在微信端打开，在电脑上就会出错？（不知道你有没有发现这一点）",
        "good_num": "112",
        "comment_num": "18"
      },
    ],
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {

  },

  toAnswer: function () {
    wx.navigateTo({
      url: "../answer/answer"
    });
  },

  toQuestion: function () {
    wx.navigateTo({
      url: "../question/question"
    });
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  }
})